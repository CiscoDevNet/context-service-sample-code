package com.cisco.thunderhead.example.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

/**
 * This allows the user to retrieve and set the connection data string used to initialize the SDK.
 */
public class ConnectionDataDialog extends JDialog {
    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectionData.class);

    private JPanel contentPane;
    private JButton buttonOK;
    private JTextField textConnectionDataEncoded;
    private JTextArea textConnectionDataDecoded;
    private JButton decodeButton;
    private JButton encodeButton;
    private JButton saveButton;
    private JButton cancelButton;

    public ConnectionDataDialog() {
        this(null);
    }

    public ConnectionDataDialog(Frame frame) {
        super(frame);
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.addActionListener(e -> onOK());

        // call onOK() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onOK();
            }
        });

        // call onOK() on ESCAPE
        contentPane.registerKeyboardAction(e -> onOK(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        decodeButton.addActionListener(e -> onDecode());
        encodeButton.addActionListener(e -> onEncode());
        saveButton.addActionListener(e -> onSave());
        cancelButton.addActionListener(e -> onCancel());

        textConnectionDataEncoded.setText(ConnectionData.getConnectionData());
        onDecode();
    }

    private void onCancel() {
        dispose();
    }

    private void onSave() {
        String txt =  textConnectionDataEncoded.getText();

        try {
            ConnectionData.getDecodedConnectionData(txt);
        } catch (RuntimeException e) {
            JOptionPane.showMessageDialog(this, "connection data string is malformed: " + e.getMessage());
            return;
        }

        int sel = JOptionPane.showConfirmDialog(this,"Replace connectiondata.txt file?");
        if (sel==JOptionPane.YES_OPTION) {
            if (!ConnectionData.saveConnectionData(textConnectionDataEncoded.getText())) {
                JOptionPane.showMessageDialog(this, "failed to save connection data");
            }
        }
    }

    private void onDecode() {
        String encodedConnectionData = textConnectionDataEncoded.getText();
        if (encodedConnectionData.length()>0) {
            try {
                String decoded = ConnectionData.getDecodedConnectionData(encodedConnectionData);
                textConnectionDataDecoded.setText(decoded);
            } catch (RuntimeException e) {
                JOptionPane.showMessageDialog(this, "failed to decode string: " + e.getMessage());
            }
        }
    }

    private void onEncode() {
        String decodedConnectionData = textConnectionDataDecoded.getText();
        if (decodedConnectionData.length()>0) {
            String encoded = ConnectionData.getEncodedConnectionData(decodedConnectionData);
            textConnectionDataEncoded.setText(encoded);
        }
    }

    private void onOK() {
        LOGGER.info("Replacing connection data with new string");
        ConnectionData.setConnectionData(textConnectionDataEncoded.getText());
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setMinimumSize(new Dimension(381, 500));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Connection Data");
        panel4.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textConnectionDataEncoded = new JTextField();
        panel4.add(textConnectionDataEncoded, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        decodeButton = new JButton();
        decodeButton.setText("Decode");
        panel4.add(decodeButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel3.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(600, 400), null, 1, false));
        textConnectionDataDecoded = new JTextArea();
        textConnectionDataDecoded.setMinimumSize(new Dimension(0, 200));
        scrollPane1.setViewportView(textConnectionDataDecoded);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
